(window.webpackJsonp=window.webpackJsonp||[]).push([[11],{426:function(t,e,l){"use strict";l.r(e);var n=l(14),r=Object(n.a)({},(function(){var t=this,e=t._self._c;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"开始使用"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#开始使用"}},[t._v("#")]),t._v(" 开始使用")]),t._v(" "),e("h2",{attrs:{id:"cellink-引擎简介"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#cellink-引擎简介"}},[t._v("#")]),t._v(" Cellink 引擎简介")]),t._v(" "),e("ul",[e("li",[t._v("Cellink 引擎是驱动“责任链模式”（Chain of Responsibility Pattern）编程的一套代码（以下简称 Cellink）。责任链模式编程具有诸多优势，其中最突出的，是实现各模块间的解耦。关于责任链模式编程互联网上有很多内容，这有篇很棒的博客可供参考："),e("a",{attrs:{href:"https://www.runoob.com/design-pattern/chain-of-responsibility-pattern.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("责任链模式"),e("OutboundLink")],1),t._v(" 。")])]),t._v(" "),e("h2",{attrs:{id:"设计动机"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#设计动机"}},[t._v("#")]),t._v(" 设计动机")]),t._v(" "),e("p",[e("strong",[t._v("人是视觉动物。")]),t._v(" 健康人类 80% 的日常活动都依赖视觉（在开发者的工作中比重可能会更高）。Cellink 允许可视化你的项目。无需另行维护，Cellink 能绘制各任务模块间的关系。让我试举例说明情况。以下流程图来自我的三个项目，它们都用 Cellink 管理：")]),t._v(" "),e("p",[t._v("项目一：\n"),e("img",{attrs:{src:"/cellink-docs/imgs/adc-graph.png",alt:""}})]),t._v(" "),e("p",[t._v("项目二:\n"),e("img",{attrs:{src:"/cellink-docs/imgs/bearing-graph.png",alt:""}})]),t._v(" "),e("p",[t._v("项目三:\n"),e("img",{attrs:{src:"/cellink-docs/imgs/nozzle-graph.png",alt:""}})]),t._v(" "),e("p",[t._v("以计算机工业视觉领域为例，来阐述 Cellink 的使用场景。一般来说，计算机视觉项目由多个子模块构成（很多其它项目亦如此），其中有些负责数据解析和格式化，有些负责图像预处理，另一些则负责算法推断。")]),t._v(" "),e("p",[t._v("很多业务场景要求把原始图像分割成多个 ROI 区域，每个区域做单独处理。比如手机的外观检测，某个业务模块只关注充电口附近的缺陷。需要先把充电口附近的区域提取出来，作预处理以后，再传给特定算法模块检测。")]),t._v(" "),e("p",[t._v("通常会差分成如下步骤：1) 载入原始手机图片，2) 定位出手机所在的图像区域，3) 在此基础上继续分割出充电口附近的像素，4) 算法模块执行检测任务。")]),t._v(" "),e("p",[t._v("以上的每个步骤都能抽象成“节点”（有关“节点”的更多细节，我们会在下面章节介绍），每个节点执行后会产生相应的数据传给下一个节点执行。")]),t._v(" "),e("p",[t._v("这套以节点来封装工作任务的流程，就是“责任链模式”编程的内涵。")]),t._v(" "),e("p",[t._v("Cellink 提供了一套简单的机制来管理各节点的流向，确保正确的执行次序。更重要的是，Cellink 能绘制各节点的关系图（如上所示），让开发者看清楚自己所开发的任务模块处于项目中什么位置。这种空间上的知觉让我在项目实践中获得了极大的把控感。哪怕面对历史久远的项目，也不会在代码的迷雾中迷失。")]),t._v(" "),e("h3",{attrs:{id:"工作原理"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#工作原理"}},[t._v("#")]),t._v(" 工作原理")]),t._v(" "),e("p",[t._v("Cellink 通过搭建“有向无环图”（DAG）对项目流程进行建模。任务模块是有向无环图的节点。所有节点都能直接访问父节点的内容。")]),t._v(" "),e("p",[t._v("Cellink 支持几种简单的图操作（比如遍历，广播，和路径搜索等等），以此实现各子任务按正确次序执行。")]),t._v(" "),e("h3",{attrs:{id:"cellink-的局限"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#cellink-的局限"}},[t._v("#")]),t._v(" Cellink 的局限")]),t._v(" "),e("p",[t._v("编写开发文档、维护项目流程图是优秀程序员的必备技能。在某些中大型项目中，项目流程在架构设计阶段就已明确，因此 Cellink 的绘图功能似乎显得多余。但 Cellink 流程图由项目代码生成，真实反映了当前代码的运行逻辑。一方面能可视化开发进度，另一方面，也能协助开发者发现代码与设计流程图冲突之处。")]),t._v(" "),e("p",[t._v("截止目前（2022年9月），Cellink 只在我们团队有限的实践中发挥了作用，而这些项目的规模都不大。我们尚不清楚它是否能被有效推广到大型、或某些特殊的项目中（比如有很多并行需求的程序）。")]),t._v(" "),e("p",[t._v("此外， Cellink 还受编程语言的限制。因为极端依赖 Python 的某些特性（比如装饰器），目前 Cellink 只支持用 Python 开发的项目。但我们期待后续能在更多编程语言上取得突破。")]),t._v(" "),e("h2",{attrs:{id:"开源协议"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#开源协议"}},[t._v("#")]),t._v(" 开源协议")]),t._v(" "),e("p",[e("a",{attrs:{href:"https://github.com/fluid-dev/hexo-theme-fluid/blob/master/LICENSE",target:"_blank",rel:"noopener noreferrer"}},[t._v("GPL-V3"),e("OutboundLink")],1)])])}),[],!1,null,null,null);e.default=r.exports}}]);