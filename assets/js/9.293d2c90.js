(window.webpackJsonp=window.webpackJsonp||[]).push([[9],{425:function(t,s,a){"use strict";a.r(s);var n=a(14),r=Object(n.a)({},(function(){var t=this,s=t._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h2",{attrs:{id:"基本概念介绍"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#基本概念介绍"}},[t._v("#")]),t._v(" 基本概念介绍")]),t._v(" "),s("h3",{attrs:{id:"一、节点"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#一、节点"}},[t._v("#")]),t._v(" 一、节点")]),t._v(" "),s("p",[t._v("“节点”是 Cellink 的基本类型。为了简单起见，我们没设计其它类型。因此，"),s("strong",[t._v("节点类型是 Cellink 里的唯一类型")]),t._v("。Cellink 的所有功能，都通过节点的方法实现。")]),t._v(" "),s("p",[t._v("根据不同的输入类型，Cellink 提供了 3 种节点的基类：")]),t._v(" "),s("div",{staticClass:"language-python extra-class"},[s("pre",{pre:!0,attrs:{class:"language-python"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("NodeSI")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 单输入节点（Single Input）")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("NodeMI")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 多输入节点（Multiple Inputs）")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("NodeCI")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 条件輸入节点（Conditional Inputs）")]),t._v("\n")])])]),s("p",[t._v("下图是这 3 种节点的可视化结构展示：")]),t._v(" "),s("p",[s("img",{attrs:{src:"/imgs/node-types.png",alt:"三种节点结构"}})]),t._v(" "),s("ul",[s("li",[s("strong",[t._v("NodeSI")]),t._v("：只有一个父节点")]),t._v(" "),s("li",[s("strong",[t._v("NodeMI")]),t._v("：挂载一个或多个父节点")]),t._v(" "),s("li",[s("strong",[t._v("NodeCI")]),t._v("：和 NodeMI 类似，挂载多个父节点。区别在于，执行 NodeMI 的条件是所有父节点都能执行；而 NodeCI 只要任一父节点能执行就行")])]),t._v(" "),s("h4",{attrs:{id:"创建节点"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#创建节点"}},[t._v("#")]),t._v(" 创建节点")]),t._v(" "),s("p",[t._v("Cellink 通过继承节点类来创建新节点。下代码展示如何创建一个 NodeSI 节点：")]),t._v(" "),s("div",{staticClass:"language-python extra-class"},[s("pre",{pre:!0,attrs:{class:"language-python"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" cellink "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" NodeMI\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Diff")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("NodeMI"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("__str__")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("self"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'diff'")]),t._v("\n")])])]),s("h4",{attrs:{id:"访问父节点"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#访问父节点"}},[t._v("#")]),t._v(" 访问父节点")]),t._v(" "),s("p",[t._v("子节点可以通过类变量来访问父节点：")]),t._v(" "),s("ul",[s("li",[s("strong",[t._v("parent")]),t._v("：NodeSI 类型的父节点")]),t._v(" "),s("li",[s("strong",[t._v("parent_list")]),t._v("：NodeMI 和 NodeCI 类型的父节点列表（之所以不叫 parents 是怕拼写上容易与 parent 混淆）")])]),t._v(" "),s("p",[t._v("父节点列表 parent_list 还有以下两点特性：")]),t._v(" "),s("ol",[s("li",[t._v("父节点在 parent_list 中的次序与被挂载时的次序相同。有关父节点的挂载，下个章节会介绍")]),t._v(" "),s("li",[t._v("如果 NodeCI 的某个父节点无法执行，那么对应 parent_list 元素的值为 None")])]),t._v(" "),s("h4",{attrs:{id:"根节点"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#根节点"}},[t._v("#")]),t._v(" 根节点")]),t._v(" "),s("p",[t._v("没有任何父节点的节点叫根节点。一个项目里可以有多个根节点。")]),t._v(" "),s("p",[t._v("根节点可选择继承 NodeSI/NodeMI/NodeCI 中的任何一个，Cellink 不做限制。")]),t._v(" "),s("p",[t._v("根节点一般是整个项目的数据入口。我们发现，用类方法（@classmethod）实例化根节点是比较好的实践：")]),t._v(" "),s("div",{staticClass:"language-python extra-class"},[s("pre",{pre:!0,attrs:{class:"language-python"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Root")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("NodeSI"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token decorator annotation punctuation"}},[t._v("@classmethod")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("initialize")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("cls"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" val"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        root "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" cls"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        root"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("val "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" val\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" root\n\nroot "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" Root"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("initialize"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("42")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("h3",{attrs:{id:"二、图"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#二、图"}},[t._v("#")]),t._v(" 二、图")]),t._v(" "),s("p",[t._v("“图”由节点组成。子节点用装饰器 "),s("code",[t._v("@hook_parent")]),t._v(" 挂载父节点。Cellink 的内部机制确保了图的有向无环结构。")]),t._v(" "),s("p",[t._v("下面代码展示了如何用 3 个节点搭建一个简单的图：")]),t._v(" "),s("div",{staticClass:"language-python extra-class"},[s("pre",{pre:!0,attrs:{class:"language-python"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" cellink "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" NodeSI\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" cellink "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" NodeMI\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" cellink "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" hook_parent\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("RGB")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("NodeSI"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 此为根节点（没有父节点），可继承任何节点类型")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token decorator annotation punctuation"}},[t._v("@classmethod")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("from_image_path")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("cls"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" image_path"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        att "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" cls"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        att"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("img "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" cv2"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("imread"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("image_path"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" att\n\n"),s("span",{pre:!0,attrs:{class:"token decorator annotation punctuation"}},[t._v("@hook_parent")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("RGB"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Gray")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("NodeSI"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("__str__")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("self"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'gray'")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("forward")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("self"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        rgb_img "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" self"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("parent"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("img  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 通过 self.parent 访问父节点")]),t._v("\n        self"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("img "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" rgb2gray"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("rgb_img"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("True")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token decorator annotation punctuation"}},[t._v("@hook_parent")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("RGB"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" Gray"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Diff")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("NodeMI"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("__str__")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("self"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'diff'")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("forward")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("self"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        rgb_img  "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" self"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("parent_list"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("img  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 访问父节点 RGB")]),t._v("\n        gray_img "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" self"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("parent_list"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("img  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 访问父节点 Gray")]),t._v("\n        self"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("img "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" np"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("abs")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("rgb_img"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("astype"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'float32'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" gray_img"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("None")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("True")]),t._v("\n")])])]),s("p",[t._v("上面代码由 Cellink 绘制的流程视图如下：")]),t._v(" "),s("p",[s("img",{attrs:{src:"/imgs/demo-graph.png",alt:""}})]),t._v(" "),s("p",[s("strong",[t._v("当一个节点被实例化时，图中的所有其它节点都会被实例化，于是它所在的图也完成了实例化：")])]),t._v(" "),s("div",{staticClass:"language-python extra-class"},[s("pre",{pre:!0,attrs:{class:"language-python"}},[s("code",[t._v("rgb "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" RGB"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 此时其它两个节点的实例也会随着被实例化")]),t._v("\nrgb"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("draw_graph"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 节点被实例化时，图也跟着被实例化")]),t._v("\n")])])]),s("h2",{attrs:{id:"创建节点-2"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#创建节点-2"}},[t._v("#")]),t._v(" 创建节点")]),t._v(" "),s("p",[t._v("新节点在创建时需要继承三个节点类（NodeSI/NodeMI/NodeCI）中的一个，并重载以下 3 个方法：")]),t._v(" "),s("ol",[s("li",[s("p",[s("strong",[t._v("__str__")]),t._v("：创建节点名称。可缺省")])]),t._v(" "),s("li",[s("p",[s("strong",[t._v("forward")]),t._v("：前向处理方法。可缺省")])]),t._v(" "),s("li",[s("p",[s("strong",[t._v("backward")]),t._v("：反向处理方法。可缺省")])])]),t._v(" "),s("p",[t._v("我们一一展开介绍。")]),t._v(" "),s("h3",{attrs:{id:"_1-节点名称-str"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-节点名称-str"}},[t._v("#")]),t._v(" 1. 节点名称 __str__：")]),t._v(" "),s("p",[t._v("节点的名称通过重载 __str__ 方法定义。如缺省，则以类名代替：")]),t._v(" "),s("div",{staticClass:"language-python extra-class"},[s("pre",{pre:!0,attrs:{class:"language-python"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Rocket")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("NodeSI"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("__str__")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("self"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'rocket'")]),t._v("\n")])])]),s("p",[t._v("注：发现重名节点 Cellink 会报错。")]),t._v(" "),s("h3",{attrs:{id:"_2-前向处理-forward"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-前向处理-forward"}},[t._v("#")]),t._v(" 2. 前向处理 forward：")]),t._v(" "),s("p",[t._v("Cellink 能推动从根节点出发，正向传播的业务流。沿途节点的 forward 方法会被依次调用。")]),t._v(" "),s("p",[t._v("forward 方法承载当前节点的业务逻辑。通常需要访问并处理父节点的数据，生成自己的数据。")]),t._v(" "),s("p",[t._v("forward 方法返回一个 boolean 值，通知 Cellink 后台是否执行成功。")]),t._v(" "),s("p",[t._v("forward 方法在缺省时返回 False（根节点返回 True，因为根节点的变量一般在类方法里设置）。")]),t._v(" "),s("p",[t._v("虽然 Cellink 不做限制，我们也不建议开发者在 forward 方法中修改父节点的内容。")]),t._v(" "),s("p",[t._v("Cellink 假定了 forward 方法的业务逻辑很耗时，且在输入数据固定的情况下输出结果不变（没有随机因素）。")]),t._v(" "),s("p",[s("strong",[t._v("所以 forward 方法在节点的整个生命周期里只执行一次！！！")])]),t._v(" "),s("p",[s("strong",[t._v("所以 forward 方法在节点的整个生命周期里只执行一次！！！")])]),t._v(" "),s("p",[s("strong",[t._v("所以 forward 方法在节点的整个生命周期里只执行一次！！！")])]),t._v(" "),s("p",[t._v("这种设计保证了节点中的业务代码不会被重复运行。")]),t._v(" "),s("p",[t._v("以下是 forward 方法的一个示例：")]),t._v(" "),s("div",{staticClass:"language-python extra-class"},[s("pre",{pre:!0,attrs:{class:"language-python"}},[s("code",[s("span",{pre:!0,attrs:{class:"token decorator annotation punctuation"}},[t._v("@hook_parent")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("RGB"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" Gray"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Diff")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("NodeMI"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("forward")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("self"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 获取父节点的数据")]),t._v("\n        rgb_img  "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" self"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("parent_list"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("img\n        gray_img "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" self"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("parent_list"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("img\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 生成自己的数据")]),t._v("\n        self"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("img "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" np"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("abs")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("rgb_img"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("astype"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'float32'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" gray_img"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("None")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 返回 True 告知后台执行成功")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("True")]),t._v("\n")])])]),s("h3",{attrs:{id:"_3-反向处理-backward"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-反向处理-backward"}},[t._v("#")]),t._v(" 3. 反向处理 backward：")]),t._v(" "),s("p",[t._v("Cellink 能推动从当前点出发，反向传播的业务流。沿途节点的 backward 方法会被依次调用。")]),t._v(" "),s("p",[t._v("和 forward 方法一样，backward 方法也返回一个 boolean 值，用于通知 Cellink 后台是否执行成功。")]),t._v(" "),s("p",[t._v("backward 方法缺省时默认返回 False 。")]),t._v(" "),s("p",[t._v("backward 方法比较常见的业务逻辑是对父节点数据进行修改。")]),t._v(" "),s("p",[t._v("backward 方法在机器视觉领域很有帮助。在我们的项目实践中，backward 方法通常用于反向传播检测结果的坐标。因为坐标变换只需在相邻层级的坐标系上进行，极大简化了编程的复杂度。")]),t._v(" "),s("p",[t._v("如果没有将信息反向传播的业务需求，backward 方法可以缺省。")]),t._v(" "),s("p",[t._v("以下是 backward 方法的一个示例：")]),t._v(" "),s("div",{staticClass:"language-python extra-class"},[s("pre",{pre:!0,attrs:{class:"language-python"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ScaleAndTranslate")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("NodeMI"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("backward")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("self"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        scale "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" self"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("scale \n        x0"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" y0 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" self"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("offset\n        x"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" y "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" self"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("coordinate\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 从局部坐标变换到全局坐标")]),t._v("\n        self"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("parent"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("coordinate "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("x "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v(" scale "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" x0"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" y "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v(" scale "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" y0"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        self"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("parent"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("classname "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" self"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("classname\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("True")]),t._v("\n")])])]),s("h2",{attrs:{id:"使用-cellink"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#使用-cellink"}},[t._v("#")]),t._v(" 使用 Cellink")]),t._v(" "),s("p",[t._v("Cellink 支持几种简单的图操作（如遍历，广播，和路径搜索等等）。这些操作都通过调用节点中的方法/变量实现。")]),t._v(" "),s("h3",{attrs:{id:"前向搜索-seek"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#前向搜索-seek"}},[t._v("#")]),t._v(" 前向搜索 seek：")]),t._v(" "),s("p",[t._v("从所有根节点开始，seek 方法遍历所有到目标节点的前向路径。沿途所有节点的 forward 方法会依次被执行。")]),t._v(" "),s("p",[t._v("seek 方法输入目标节点的名称（该名称通过 __str__ 方法定义），返回目标节点的实例：")]),t._v(" "),s("div",{staticClass:"language-python extra-class"},[s("pre",{pre:!0,attrs:{class:"language-python"}},[s("code",[t._v("diff "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" rgb"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("seek"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'diff'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 从根节点开始，依次执行沿路各节点的 forward() 方法，并返回 Diff 节点的实例")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("diff"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("img"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("shape"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 因为 diff.forward() 已被执行，diff.img 也被生成")]),t._v("\n")])])]),s("p",[t._v("如果无法抵达目标节点（沿途的 forward 方法执行失败返回了 False，中断了正向传播的过程），seek 方法返回 None 。")]),t._v(" "),s("p",[t._v("seek 方法可以被任意节点调用，效果是一样的：")]),t._v(" "),s("div",{staticClass:"language-python extra-class"},[s("pre",{pre:!0,attrs:{class:"language-python"}},[s("code",[t._v("node1 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" rgb"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("seek"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'diff'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nnode2 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" node1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("seek"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'diff'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("assert")]),t._v(" node1 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" node2\n")])])]),s("h3",{attrs:{id:"反向搜索-retr"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#反向搜索-retr"}},[t._v("#")]),t._v(" 反向搜索 retr：")]),t._v(" "),s("p",[t._v("从当前节点出发，retr 方法（retrospect，缩写成四个字母是为了和 seek 等长）遍历所有到目标节点的前向路径。沿途所有节点的 backward 方法会依次被执行：")]),t._v(" "),s("div",{staticClass:"language-python extra-class"},[s("pre",{pre:!0,attrs:{class:"language-python"}},[s("code",[t._v("gray "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" root"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("seek"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'gray'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("gray"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("bboxes"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 输出：[[33,100,94,423], [53,16,312,50]]")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 反向传播到根节点")]),t._v("\nroot "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" gray"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("retr"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'rgb'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("root"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("bboxes"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 输出某个值")]),t._v("\n")])])]),s("p",[t._v("如果无法抵达目标节点（沿途的 backward 方法执行失败，中断了反向传播的过程），retr 方法返回 None")]),t._v(" "),s("p",[t._v("retr 方法可以不输入参数，此时 retr 会从当前节点沿路运行所有祖先节点的 backward 方法。此时 retr 方法返回 None：")]),t._v(" "),s("div",{staticClass:"language-python extra-class"},[s("pre",{pre:!0,attrs:{class:"language-python"}},[s("code",[t._v("gray"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("retr"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("root"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("bboxes"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 输出某个值")]),t._v("\n")])])]),s("h3",{attrs:{id:"索引-getitem"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#索引-getitem"}},[t._v("#")]),t._v(" 索引：__getitem__()")]),t._v(" "),s("p",[t._v("该方法可以索引图中任一节点：")]),t._v(" "),s("div",{staticClass:"language-python extra-class"},[s("pre",{pre:!0,attrs:{class:"language-python"}},[s("code",[t._v("diff "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" root"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'diff'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\ngray "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" diff"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'gray'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n")])])]),s("p",[s("strong",[t._v("注意")]),t._v("：和 seek 方法不同，索引操作不触发沿途的 forward 方法。")]),t._v(" "),s("h3",{attrs:{id:"广播-broadcast"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#广播-broadcast"}},[t._v("#")]),t._v(" 广播：broadcast()")]),t._v(" "),s("p",[t._v("broadcast 方法输入一个字典类型作为信息，并向所有节点广播。其它节点可通过 self.broadcasting （字典类型）读取：")]),t._v(" "),s("div",{staticClass:"language-python extra-class"},[s("pre",{pre:!0,attrs:{class:"language-python"}},[s("code",[t._v("root"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("broadcast"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'greet'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'good morning!'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("gray"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("broadcasting"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'greet'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 输出: good morning!")]),t._v("\ngray"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("broadcast"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'greet'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'good evening!'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("root"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("broadcasting"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'greet'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 输出: good evening!")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 更直接的广播方法：")]),t._v("\nroot"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("broadcasting"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'greet'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'good evening!'")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("gray"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("broadcasting"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'greet'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 输出: good evening!")]),t._v("\n")])])]),s("p",[t._v("广播机制用于节点间快速通信，类似全局变量。")]),t._v(" "),s("p",[t._v("不建议滥用广播机制。")]),t._v(" "),s("h3",{attrs:{id:"遍历-traverse"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#遍历-traverse"}},[t._v("#")]),t._v(" 遍历：traverse()")]),t._v(" "),s("p",[t._v("traverse 方法以 callback 函数为输入，该 callback 函数以节点实例为输入，由开发者定义。")]),t._v(" "),s("p",[t._v("traverse 遍历图中所有节点，并对以每个节点为输入执行 callback 函数。最后返回 callback 函数的执行结果列表：")]),t._v(" "),s("div",{staticClass:"language-python extra-class"},[s("pre",{pre:!0,attrs:{class:"language-python"}},[s("code",[t._v("str_node_pairs "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" diff"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("traverse"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("lambda")]),t._v(" node"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("str")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("node"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" node"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 返回 callback 函数的输出列表")]),t._v("\nstr2node "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("dict")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("str_node_pairs"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nroot "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" str2node"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'rgb'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n")])])]),s("p",[t._v("traverse 方法不触发沿途的 forward/backward 方法。")]),t._v(" "),s("p",[t._v("traverse 方法遍历节点的次序是无规则的。")]),t._v(" "),s("h3",{attrs:{id:"绘制流程视图-draw-graph"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#绘制流程视图-draw-graph"}},[t._v("#")]),t._v(" 绘制流程视图：draw_graph()")]),t._v(" "),s("p",[t._v("draw_graph 方法绘制流程视图（见上图）。视图保存在工作目录的 "),s("code",[t._v("graph.pdf")]),t._v(" 文件中。")]),t._v(" "),s("p",[t._v("**Cellink 需安装 graphviz 库（pip install graphviz）和相关工具。**graphviz 在不同系统下的安装说明请参见："),s("a",{attrs:{href:"https://graphviz.org/download/",target:"_blank",rel:"noopener noreferrer"}},[t._v("graphviz 下载页面"),s("OutboundLink")],1)]),t._v(" "),s("div",{staticClass:"language-python extra-class"},[s("pre",{pre:!0,attrs:{class:"language-python"}},[s("code",[t._v("root"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("draw_graph"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 画出整个网络")]),t._v("\n")])])]),s("h2",{attrs:{id:"装饰器说明"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#装饰器说明"}},[t._v("#")]),t._v(" 装饰器说明")]),t._v(" "),s("p",[t._v("Cellink 定义了两种装饰器："),s("code",[t._v("@hook_parent")]),t._v(" 和 "),s("code",[t._v("@static_initializer")]),t._v(" 。前者用于挂载父节点，后者实现静态初始化功能。")]),t._v(" "),s("h3",{attrs:{id:"挂载装饰器-hook-parent"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#挂载装饰器-hook-parent"}},[t._v("#")]),t._v(" 挂载装饰器 @hook_parent")]),t._v(" "),s("p",[t._v("@hook_parent 是类装饰器，用于挂载父节点。@hook_parent 以父节点类作输入：")]),t._v(" "),s("div",{staticClass:"language-python extra-class"},[s("pre",{pre:!0,attrs:{class:"language-python"}},[s("code",[s("span",{pre:!0,attrs:{class:"token decorator annotation punctuation"}},[t._v("@hook_parent")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("ParentClass"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 挂载一个父节点")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ChildClass")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("NodeSI"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 挂载一个父节点时，子节点可继承 NodeSI 类")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("forward")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("self"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        parent_node "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" self"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("parent\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token decorator annotation punctuation"}},[t._v("@hook_parent")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("MotherClass"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" FatherClass"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 挂载多个父节点")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ChildClass")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("NodeMI"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 挂载多个父节点时，子节点应该继承 NodeMI 类或 NodeCI 类")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("forward")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("self"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        mother_node "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" self"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("parent_list"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# parent_list 的实例类别次序和装饰器输入类别次序一致")]),t._v("\n        father_node "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" self"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("parent_list"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# parent_list 第二个元素是 FatherClass 的类实例")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v(" \n")])])]),s("h3",{attrs:{id:"静态初始化装饰器-static-initializer"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#静态初始化装饰器-static-initializer"}},[t._v("#")]),t._v(" 静态初始化装饰器 @static_initializer：")]),t._v(" "),s("p",[t._v("@static_initializer 是函数装饰器，用于（静态）加载初始化耗时的内容。设计该装饰器是为了给运行加速 。")]),t._v(" "),s("p",[t._v("让我尝试用案例来说明。很多深度学习项目需要加载 AI 模型，加载模型通常比较耗时。普遍的做法是在初始化阶段一次性完成加载。哪怕某些模型没被用到，却也消耗了加载时间。我们希望 Cellink 能赋予更多灵活性：")]),t._v(" "),s("ol",[s("li",[s("p",[t._v("只有被 seek 方法触发，相关节点的模型才会被加载")])]),t._v(" "),s("li",[s("p",[t._v("在程序的整个生命周期中，模型不会被重复加载")])])]),t._v(" "),s("p",[t._v("为了不失一般性，“模型加载”也可以是任何开销昂贵的初始化操作。")]),t._v(" "),s("p",[t._v("以下代码展示了 @static_initializer 的用法")]),t._v(" "),s("div",{staticClass:"language-python extra-class"},[s("pre",{pre:!0,attrs:{class:"language-python"}},[s("code",[s("span",{pre:!0,attrs:{class:"token decorator annotation punctuation"}},[t._v("@hook_parent")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Image"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Bump")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("NodeSI"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("__str__")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("self"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'bump'")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token decorator annotation punctuation"}},[t._v("@static_initializer")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("initialize_bump_finder")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("self"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 该函数在整个进程生涯中只执行一次")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 加载 AI 模型，耗时操作")]),t._v("\n        bump_finder "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" Controller"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("gpu_id"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" bump_finder\n\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("forward")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("self"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        img "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" self"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("parent"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("img\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 在程序的生命周期中，只有第一次调用会执行该函数的内容，")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 往后的所有调用只返回第一次调用返回的内容")]),t._v("\n        bump_finder "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" self"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("initialize_bump_finder"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        bump_bboxes "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" bump_finder"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("img"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\nimg1 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" Image"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("from_image_path"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'IMAGE1.JPG'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nbump "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" img1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("seek"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'bump'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 加载 AI 模型，耗时 2s")]),t._v("\n\nimg2 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" Image"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("from_image_path"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'IMAGE1.JPG'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nbump "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" img2"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("seek"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'bump'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# AI 模型不会被二次加载，只执行业务代码")]),t._v("\n")])])]),s("p",[t._v("@static_initializer 装饰器保证被装饰函数在整个进程周期中只调用一次，往后的调用都只是返回第一次加载进来的模型的引用。")])])}),[],!1,null,null,null);s.default=r.exports}}]);